# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MCmUZyW1wlu4kEQw8G_nEwoA8d1sW7XS
"""
import numpy as np
from flask import Flask, request, jsonify
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Reshape, Flatten
from tensorflow.keras.optimizers import Adam

app = Flask(__name__)

# Define generator model
def build_generator(input_dim):
    model = Sequential()
    model.add(Dense(128, input_dim=input_dim, activation='relu'))
    model.add(Dense(256, activation='relu'))
    model.add(Dense(512, activation='relu'))
    model.add(Dense(784, activation='sigmoid'))
    model.add(Reshape((28, 28)))
    return model

# Define discriminator model
def build_discriminator(input_shape):
    model = Sequential()
    model.add(Flatten(input_shape=input_shape))
    model.add(Dense(512, activation='relu'))
    model.add(Dense(256, activation='relu'))
    model.add(Dense(1, activation='sigmoid'))
    return model

# Define GAN model
def build_gan(generator, discriminator):
    discriminator.trainable = False
    model = Sequential()
    model.add(generator)
    model.add(discriminator)
    model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.0002, beta_1=0.5))
    return model

# Generate synthetic data using GAN
def generate_synthetic_data(generator):
    noise = np.random.normal(0, 1, (1, 100))
    synthetic_data = generator.predict(noise)
    return synthetic_data

# Create generator and discriminator
generator = build_generator(input_dim=100)
discriminator = build_discriminator(input_shape=(28, 28))
gan = build_gan(generator, discriminator)

@app.route('/generate', methods=['GET'])
def generate_data():
    synthetic_data = generate_synthetic_data(generator)
    # You may need to preprocess the synthetic data if required
    return jsonify({"synthetic_data": synthetic_data.tolist()})

if __name__ == '__main__':
    app.run(debug=True)